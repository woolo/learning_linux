# source: https://gregable.com/2010/09/why-you-should-know-just-little-awk.html

echo 'this is a test' | awk '{print $3}'  // prints 'a'

echo 'this is a test' | awk '{print $NF}'  // prints "test"
awk '{print $1, $(NF-2) }' logs.txt  // prints the third value, couting from the end to start


awk '{print NR ") " $1 " -> " $(NF-2)}' logs.txt  // Notice that there's no $ before NR

# change field seperator
awk '{print $2}' logs.txt | awk 'BEGIN{FS=":"}{print $1}'

# If I want to return only the 200 status lines, I could use grep, but I
 might end up with an ip address that contains 200, or a date from
 year 2000. I could first grab the 200 field with Awk and then grep,
 but then I lose the whole line's context.

awk '{if ($(NF-2) == "200") {print $0}}' logs.txt 

# a is a value that will be persistent in the "awk for loop"
awk '{a+=$(NF-2); print "Total so far:", a}' logs.txt

# BEGIN will be evaluated only once at beginning
awk '{print $2}' logs.txt | awk 'BEGIN{FS=":"}{print $1}' | sed 's/\[//'

# END will be evaluated only once at the end
awk '{a+=$(NF-2)}END{print "Total:", a}' logs.txt

# Now we can understand the awk is an implicit loop as follow
BEGIN{}
while(There is still any line)
  if() {do1; do2;}
END{}

